packets:

  # ACKNOWLEDGE
  # \xc0 is not a real packet id, it's 0b11000000, a DatagramHeaderFormat with isValid and isACK flags
  - id: \xc0
    type: packet
    name: acknowledge
    structure:
      - { type: range_list, name: packet_ranges }

  # UNACKNOWLEDGE
  # \xa0 is not a real packet id, it's 0b10100000, a DatagramHeaderFormat with isValid and isNAK flags
  - id: \xa0
    type: packet
    name: unacknowledge
    structure:
      - { type: range_list, name: packet_ranges }

  # ADVERTISE_SYSTEM
  # Inform a remote system of our IP/Port.
  # On the recipient, all data past ID_ADVERTISE_SYSTEM is whatever was passed to the data parameter.
  - id: \x1d
    type: packet
    name: advertise_system
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?
      - { type: long_long, name: server_guid }
      - { type: __magic__ }
      - { type: string, name: server_name }

  # CONNECTION_REQUEST (Client to Server)
  # Header(1), GUID(8), Timestamp, HasSecurity(1), Proof(32)
  - id: \x09
    name: connection_request
    type: data_packet
    structure:
      - { type: long_long, name: client_guid }
      - { type: long_long, name: send_ping }
      - { type: bool, name: use_security }

  # CLIENT_DISCONNECT_DataPacket

  # CLIENT_HANDSHAKE_DataPacket

  # DATA_PACKET_0
  # DATA_PACKET_1
  # DATA_PACKET_2
  # DATA_PACKET_3
  # DATA_PACKET_4
  # DATA_PACKET_5
  # DATA_PACKET_6
  # DATA_PACKET_7
  # DATA_PACKET_8
  # DATA_PACKET_9
  # DATA_PACKET_A
  # DATA_PACKET_B
  # DATA_PACKET_C
  # DATA_PACKET_D
  # DATA_PACKET_E
  # DATA_PACKET_F

  # OPEN_CONNECTION_REPLY_1 (Server to Client)
  # Header(1), OfflineMesageID(16), server GUID(8), HasSecurity(1), Cookie(4, if HasSecurity),
  # public key (if do security is true), MTU(2)
  - id: \x06
    type: packet
    name: open_connection_reply_1
    structure:
      - { type: __magic__ }
      - { type: long_long, name: server_guid }
      - { type: bool, name: use_security }
      - { type: unsigned_short, name: mtu_size }


  # OPEN_CONNECTION_REPLY_2 (Server To Client)
  # Header(1), OfflineMesageID(16), server GUID(8), mtu(2), doSecurity(1 bit), handshakeAnswer (if do security is true)
  - id: \x08
    type: packet
    name: open_connection_reply_2
    structure:
      - { type: __magic__ }
      - { type: long_long, name: server_guid }
      - { type: address, name: address }
      - { type: unsigned_short, name: mtu_size }
      - { type: bool, name: use_security }


#  # OPEN_CONNECTION_REQUEST_1
#  - id: \x05
#    type: packet
#    name: open_connection_request_1
#    structure:
#      - { type: __magic__ }
#      - { type: byte, name: protocol }
#      # padding with \x00 until complete packet = mtu_size
#      - { type: ????, name: mtu_size }

#  # OPEN_CONNECTION_REQUEST_2
#  - id: \x07
#    type: packet
#    name: open_connection_request_2
#    structure:
#      - { type: __magic__ }
#      - { type: address, name: server_address }
#      - { type: unsigned_short, name: mtu_size }
#      - { type: long_long, name: client_id }

  # CONNECTED_PING
  # Ping from a connected system.  Update timestamps (internal use only)
  - id: \x00
    name: connected_ping
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?

  # CONNECTED_PONG
  # Pong from a connected system.
  # Update timestamps (internal use only)
  - id: \x03
    name: connected_pong
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?

#  # SERVER_HANDSHAKE_DataPacket
#  - id: \x10
#    name: server_handshake_data
#    structure:
#      - { type: address, name: address }
#      - { type: port, name: port }

  # UNCONNECTED_PING
  # Ping from an unconnected system.
  # Reply but do not update timestamps (internal use only)
  - id: \x01
    name: unconnected_ping
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?
      - { type: __magic__ }
      - { type: long_long, name: client_guid }

  # UNCONNECTED_PING_OPEN_CONNECTIONS
  # Ping from an unconnected system.
  # Only reply if we have open connections.
  # Do not update timestamps (internal use only)
  - id: \x02
    name: unconnected_ping_open_connections
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?
      - { type: __magic__ }
      - { type: long_long, name: client_guid }

  # UNCONNECTED_PONG
  # Pong from an unconnected system.  First byte is ID_UNCONNECTED_PONG, second sizeof(RakNet::TimeMS) bytes
  # is the ping, following bytes is system specific enumeration data. Read using bitstreams.
  - id: \x1c
    name: unconnected_pong
    structure:
      - { type: long_long, name: ping_id }  # todo: type should be RakNet::TimeMS ?
      # enumeration data below. todo: is this MC specific ?
      - { type: long_long, name: server_guid }
      - { type: __magic__ }
      - { type: string, name: server_name }
